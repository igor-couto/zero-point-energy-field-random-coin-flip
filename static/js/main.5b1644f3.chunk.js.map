{"version":3,"sources":["components/Coin/coin-heads.svg","components/Coin/coin-tails.svg","settings/settings.ts","components/Coin/index.tsx","components/Links/index.tsx","components/ExplanatoryText/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Settings","Coin","coinHeadsElement","coinTailsElement","useState","setCoinSide","isFlipping","setFlipping","Flip","a","document","getElementById","BeginAnimation","FlipCoin","setTimeout","StopAnimation","fetch","response","json","responseModels","console","log","data","style","zIndex","removeAttribute","offsetWidth","classList","add","id","onClick","src","coinHeads","className","alt","coinTails","Links","href","target","rel","ExplanatoryText","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,sRCA9BC,EACJ,4DCKM,SAASC,IAAQ,IAKxBC,EACAC,EANuB,EAEKC,mBAAS,SAFd,mBAEVC,GAFU,aAGOD,oBAAS,GAHhB,mBAGpBE,EAHoB,KAGRC,EAHQ,KAUrBC,EAAI,uCAAG,sBAAAC,EAAA,yDAETP,EAAmBQ,SAASC,eAAe,aAC3CR,EAAmBO,SAASC,eAAe,cAExCL,EALM,iDAOTC,GAAY,GAEZK,IACAC,IAEAC,YAAW,WACPC,IACAR,GAAY,KAhBE,KAET,2CAAH,qDAViB,SA4BZM,IA5BY,2EA4B3B,8BAAAJ,EAAA,sEAC2BO,MAAMhB,GADjC,cACUiB,EADV,gBAEiCA,EAASC,OAF1C,OAEUC,EAFV,OAGIC,QAAQC,IAAIF,EAAeG,KAAK,GAAK,IAAM,EAAI,YAAc,aAE1DH,EAAeG,KAAK,GAAK,IAAM,GAC9BjB,EAAY,SACZH,EAAkBqB,MAAMC,OAAS,IACjCrB,EAAkBoB,MAAMC,OAAS,QAIjCnB,EAAY,SACZH,EAAkBqB,MAAMC,OAAS,MACjCrB,EAAkBoB,MAAMC,OAAS,KAdzC,4CA5B2B,sBA4D3B,SAASZ,IACLV,EAAkBuB,gBAAgB,SAC7BvB,EAAkBwB,YACvBxB,EAAkByB,UAAUC,IAAI,QAChC1B,EAAkByB,UAAUC,IAAI,SAEhCzB,EAAkBsB,gBAAgB,SAC7BtB,EAAkBuB,YACvBvB,EAAkBwB,UAAUC,IAAI,QAChCzB,EAAkBwB,UAAUC,IAAI,SAGpC,SAASb,IACLb,EAAkBuB,gBAAgB,SAC7BvB,EAAkBwB,YACvBxB,EAAkByB,UAAUC,IAAI,QAEhCzB,EAAkBsB,gBAAgB,SAC7BtB,EAAkBuB,YACvBvB,EAAkBwB,UAAUC,IAAI,QAGpC,OACI,6BAASC,GAAG,OAAOC,QAAStB,GAExB,yBAAKqB,GAAG,YAAYE,IAAKC,IAAWC,UAAU,OAAOC,IAAI,eACzD,yBAAKL,GAAG,YAAYE,IAAKI,IAAWF,UAAU,OAAOC,IAAI,gB,MCzFtD,SAASE,IACpB,OACI,6BAASP,GAAG,SAER,uBAAGQ,KAAK,yEACLC,OAAO,SACPC,IAAI,uBAFP,UAOA,uBAAGF,KAAK,2BACLC,OAAO,SACPC,IAAI,uBAFP,a,MCXG,SAASC,IACpB,OACI,iCACI,yHAIA,uE,MCaGC,MAjBf,WACI,OACI,6BAEI,8BACI,kBAACxC,EAAD,MACA,kBAACuC,EAAD,OAGJ,gCACI,kBAACJ,EAAD,SCJIM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASC,eAAe,SDiIpB,kBAAmBuC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.5b1644f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coin-heads.e35e1baf.svg\";","module.exports = __webpack_public_path__ + \"static/media/coin-tails.70db53e3.svg\";","export const Settings = {\r\n    API: 'https://qrng.anu.edu.au/API/jsonI.php?length=1&type=uint8',\r\n}","import React, {useState} from 'react';\r\nimport './style.css';\r\nimport coinHeads from './coin-heads.svg';\r\nimport coinTails from './coin-tails.svg';\r\nimport {Settings} from '../../settings/settings';\r\n\r\nexport default function Coin() {\r\n    \r\n    const [coinSide, setCoinSide] = useState('tails');\r\n    const [isFlipping, setFlipping] = useState(false);\r\n\r\n    let coinHeadsElement : HTMLElement | null;\r\n    let coinTailsElement : HTMLElement | null;\r\n\r\n    const animationTime = 2000;\r\n\r\n    const Flip = async function (){\r\n\r\n        coinHeadsElement = document.getElementById('coinHeads');\r\n        coinTailsElement = document.getElementById('coinTails');\r\n\r\n        if(isFlipping) return;\r\n\r\n        setFlipping(true);\r\n\r\n        BeginAnimation();\r\n        FlipCoin();\r\n\r\n        setTimeout(function () {\r\n            StopAnimation();\r\n            setFlipping(false);\r\n        }, animationTime);\r\n    }\r\n\r\n    async function FlipCoin(){\r\n        const response = await fetch(Settings.API);\r\n        const responseModels = await response.json();\r\n        console.log(responseModels.data[0] % 2 === 0 ? 'deu tails' : 'deu heads');\r\n\r\n        if(responseModels.data[0] % 2 === 0){\r\n            setCoinSide('tails');\r\n            coinHeadsElement!.style.zIndex = '0';\r\n            coinTailsElement!.style.zIndex = '100';\r\n        }\r\n            \r\n        else {\r\n            setCoinSide('heads');\r\n            coinHeadsElement!.style.zIndex = '100';\r\n            coinTailsElement!.style.zIndex = '0';\r\n        }\r\n            \r\n    }\r\n\r\n    function SetResult(){\r\n        if(coinSide === 'tails'){\r\n            console.log('estado é tails');\r\n            coinHeadsElement!.style.zIndex = '0';\r\n            coinTailsElement!.style.zIndex = '100';\r\n        }\r\n        else {\r\n            console.log('estado é hrads');\r\n            coinHeadsElement!.style.zIndex = '100';\r\n            coinTailsElement!.style.zIndex = '0';\r\n        } \r\n    }\r\n\r\n    function BeginAnimation(){\r\n        coinHeadsElement!.removeAttribute('class');\r\n        void coinHeadsElement!.offsetWidth;\r\n        coinHeadsElement!.classList.add('coin');\r\n        coinHeadsElement!.classList.add('heads');\r\n        \r\n        coinTailsElement!.removeAttribute('class');\r\n        void coinTailsElement!.offsetWidth;\r\n        coinTailsElement!.classList.add('coin');\r\n        coinTailsElement!.classList.add('tails');\r\n    }\r\n\r\n    function StopAnimation(){\r\n        coinHeadsElement!.removeAttribute('class');\r\n        void coinHeadsElement!.offsetWidth;\r\n        coinHeadsElement!.classList.add('coin');\r\n\r\n        coinTailsElement!.removeAttribute('class');\r\n        void coinTailsElement!.offsetWidth;\r\n        coinTailsElement!.classList.add('coin');\r\n    }\r\n\r\n    return(\r\n        <section id=\"coin\" onClick={Flip}>\r\n\r\n            <img id=\"coinHeads\" src={coinHeads} className=\"coin\" alt=\"coin heads\" />\r\n            <img id=\"coinTails\" src={coinTails} className=\"coin\" alt=\"coin tails\" />\r\n            \r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport './style.css';\r\n\r\nexport default function Links() {\r\n    return(\r\n        <section id=\"links\">\r\n\r\n            <a href=\"https://github.com/igor-couto/zero-point-energy-field-random-coin-flip\" \r\n               target=\"_blank\"\r\n               rel=\"noopener noreferrer\"\r\n            >\r\n                Source\r\n            </a>\r\n\r\n            <a href=\"https://qrng.anu.edu.au/\"\r\n               target=\"_blank\"\r\n               rel=\"noopener noreferrer\"\r\n            >\r\n                ANU QRNG\r\n            </a>\r\n            \r\n      </section>\r\n    )\r\n}","import React from 'react';\r\nimport './style.css';\r\n\r\nexport default function ExplanatoryText() {\r\n    return(\r\n        <section>\r\n            <p>\r\n                A true random coin flip generator, powered by a quantum zero point energy field in vacuum.\r\n            </p>\r\n\r\n            <p>\r\n                Because computer entropy is for losers.\r\n            </p>\r\n        </section>\r\n    );\r\n}","import React from 'react';\r\nimport Coin from './components/Coin/';\r\nimport Links from './components/Links/';\r\nimport ExplanatoryText from './components/ExplanatoryText';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n\r\n            <main>     \r\n                <Coin/>\r\n                <ExplanatoryText/>\r\n            </main>\r\n\r\n            <footer>\r\n                <Links/>\r\n            </footer>\r\n\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}